/**
 * Created by root on 6/7/14.
 */
  import org.apache.spark.storage.StorageLevel
  import org.apache.spark.streaming.dstream.NetworkReceiver
  import java.lang.StringBuilder
  import org.jnetpcap.Pcap
  import org.jnetpcap.packet.PcapPacket
  import org.jnetpcap.packet.PcapPacketHandler
  import java.util.Date


  /**
   * Created by root on 5/7/14.
   */
  class Receiver
    extends NetworkReceiver[String] {
    def main() {
      println("In main")
    }

    val blocksGenerator: BlockGenerator =
      new BlockGenerator(StorageLevel.MEMORY_ONLY_SER_2)

    def onStart() {
      // Start the thread that receives data over a connection
      new Thread("PacketReceiver") {
        override def run() {
          receive()
        }
      }.start()
    }

    def receive() {
      val snaplen = 64 * 1024 // Capture all packets, no trucation
      val flags = Pcap.MODE_PROMISCUOUS // capture all packets
      val timeout = 10 * 1000
      val jsb = new java.lang.StringBuilder()
      val errbuf = new StringBuilder(jsb)
      val pcap = Pcap.openLive("eth0", snaplen, flags, timeout, errbuf)

      if (pcap == null) {
        println("Error : " + errbuf.toString())
      }
      println(pcap)
      val jpacketHandler = new PcapPacketHandler[String]() {

        def nextPacket(packet: PcapPacket, user: String) {
          println("Received packet at %s caplen=%-4d len=%-4d %s\n", new Date(packet.getCaptureHeader.timestampInMillis()),
            packet.getCaptureHeader.caplen(), packet.getCaptureHeader.wirelen(), user)
        }
      }
      pcap.loop(10, jpacketHandler, "jNetPcap rocks!")
      pcap.close()
    }

    def onStop() {
    }
  }


